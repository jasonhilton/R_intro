[
  {
    "objectID": "Web-scraping.html",
    "href": "Web-scraping.html",
    "title": "Web Scraping",
    "section": "",
    "text": "We are going to scrape some text data from a websites created directly for the purposes of practicing scraping.\nAs you may remember from our discussions in the lecture, if we were applying this on ‘real’ websites, we would have to be careful about the ethical, legal and privacy implications of the data we were planning to collect.\nWe also need to be careful about the rate at which we scrape webpages from a site: too many page requests can overwhelm the server, or may consume unreasonable server resource, worsening the experience for other users. It could also lead to restriction being applied to your ability to make future requests for webpages from this site.\nWe therefore must practice polite scraping by identifying ourselves and intentionally limiting the number of requests we make of the server."
  },
  {
    "objectID": "Web-scraping.html#introduction",
    "href": "Web-scraping.html#introduction",
    "title": "Web Scraping",
    "section": "",
    "text": "We are going to scrape some text data from a websites created directly for the purposes of practicing scraping.\nAs you may remember from our discussions in the lecture, if we were applying this on ‘real’ websites, we would have to be careful about the ethical, legal and privacy implications of the data we were planning to collect.\nWe also need to be careful about the rate at which we scrape webpages from a site: too many page requests can overwhelm the server, or may consume unreasonable server resource, worsening the experience for other users. It could also lead to restriction being applied to your ability to make future requests for webpages from this site.\nWe therefore must practice polite scraping by identifying ourselves and intentionally limiting the number of requests we make of the server."
  },
  {
    "objectID": "Web-scraping.html#recap-html-pages",
    "href": "Web-scraping.html#recap-html-pages",
    "title": "Web Scraping",
    "section": "Recap: HTML pages",
    "text": "Recap: HTML pages\nTo remind ourselves of the material covered in the lecture, we wish to extract data from a webpage provided in html format. Normally html pages is provided to our web-browsers in response to a request, which might occur, for instance, when we click on a link. However, we are going to request a web-page using R, and use the R package Rvest to extract data from the result.\nA very simple example of an html document is given below. We have opening and closing html tags which defining html elements, which may be nested within each other. In the below, there is a paragraph element &lt;p&gt; with some text content which is contained within a &lt;div&gt; element (div for ‘division’) which is generally used to divide up the page and group together particular elements that are related somehow.\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;!-- Meta-information, title, scripts. --&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;\n      &lt;p&gt; I am here! &lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\nA more visual example of an html page structure is given below:\n\n\n\nSource: https://www.w3schools.com/html/html_intro.asp"
  },
  {
    "objectID": "Web-scraping.html#recap-html-attributes",
    "href": "Web-scraping.html#recap-html-attributes",
    "title": "Web Scraping",
    "section": "Recap: html attributes",
    "text": "Recap: html attributes\nHTML elements may have attributes. These describe certain properties relating to that element. These can help us extract information from a web-page.\n\nIDs and Classes\nThe two most useful attributes are id and class. IDs uniquely identify particular html elements, so that two html elements on the same page can’t share the same ID. IDs are specified as below.\n&lt;p id=\"introduction\"&gt;\nClasses identify particular elements that are related in some way. Classes are often used to provide uniform formatting across such related elements.\n&lt;div class=\"bio\"&gt;"
  },
  {
    "objectID": "Web-scraping.html#recap-css-selectors",
    "href": "Web-scraping.html#recap-css-selectors",
    "title": "Web Scraping",
    "section": "Recap: CSS selectors",
    "text": "Recap: CSS selectors\nWhen we identify a page from which we want to scrape data, it is helpful to investigate the html source of this page. The will help us right the code that will allow us to select the elements from which we want to extract content.\nYou may remember from the lecture that we can do this using css selectors. CSS stands for cascading style sheet, and it is the language through which website programmers how particular groups of the html elements should appear.\nThe style of HTML content is the way it appears when it is viewed through a web browser.\nThis is generally determined by instructions written in the CSS (Cascading Style Sheets) language.\n\nThese instructions provides information about fonts, colours, size etc.\n\nWhy do we care about this?\n\nIn order to determine which elements of an HTML page should be styled, CSS uses selectors\nThis is specific way of referring to particular elements, classes and ids in CSS code\nWe can use these CSS selectors to specify which html elements we want to extract for analysis\n\nThe most important css rules are:\n\nTo select by element, the name of the element is simply written. For example p, h2, div, etc\nTo select by class, we add the . symbol. For example, .big-title\nTo select by id, we add the # symbol: #bio.\n\nWe can chain these selectors together:\n\np.body-text selects all paragraph elements of class body-text\n.body-text.intro selects all elements with both classes body text and intro\n.body-text .intro note space selects all elements of class intro that are descendents of elements of class .body-text.\n\nFull reference here: https://www.w3schools.com/cssref/css_selectors.php\nNow that we have done our revision, we can try look at trying to scrape data from a particular site.\nVisit https://quotes.toscrape.com/ and examine the structure of the site. This site contains a set of quotations from various famous people. The information is spread over several pages. We would like to extract information from each of these quotes, and load them into a sensible dataframe.\nWe start by loading in the packages tidyverse and rvest.\n\nlibrary(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(rvest)\n\nWarning: package 'rvest' was built under R version 4.3.3\n\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\n\nWe can use the rvest function read_html to read the html of the quotes page mentioned previously. The function issues a http request and parses the result.\n\nquotes_html  &lt;- read_html(\"https://quotes.toscrape.com/\")\nquotes_html\n\n{html_document}\n&lt;html lang=\"en\"&gt;\n[1] &lt;head&gt;\\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ...\n[2] &lt;body&gt;\\n    &lt;div class=\"container\"&gt;\\n        &lt;div class=\"row header-box\"&gt; ...\n\n\nThe result is an R object quotes_html that contains an R representation of the website.\nWe can use the function html_elements to extract all elements that match a particular css selector. But first we need to find which css elements we want to extract.\nIn the quotes to scrape website, right click anywhere on the page and click ‘View page source’ or similar (the exact menu option may depend upon your browser). You should be able to see the html source corresponding to this page.\nTake a moment to examine the structure of the page, and see how it compares to what you see when you open the web page with the browser.\nYou may notice that each quote is contained within a div element of class quote. Within each of these divs is a span of class text, which contains the text of the quote, and a small element of class author, which has the name of the author.\nTherefore, we can extract all the div elements of class quote using the css selector div.quote.\n\nquotes_html %&gt;% html_elements(\"div.quote\")\n\n{xml_nodeset (10)}\n [1] &lt;div class=\"quote\" itemscope itemtype=\"http://schema.org/CreativeWork\"&gt;\\ ...\n [2] &lt;div class=\"quote\" itemscope itemtype=\"http://schema.org/CreativeWork\"&gt;\\ ...\n [3] &lt;div class=\"quote\" itemscope itemtype=\"http://schema.org/CreativeWork\"&gt;\\ ...\n [4] &lt;div class=\"quote\" itemscope itemtype=\"http://schema.org/CreativeWork\"&gt;\\ ...\n [5] &lt;div class=\"quote\" itemscope itemtype=\"http://schema.org/CreativeWork\"&gt;\\ ...\n [6] &lt;div class=\"quote\" itemscope itemtype=\"http://schema.org/CreativeWork\"&gt;\\ ...\n [7] &lt;div class=\"quote\" itemscope itemtype=\"http://schema.org/CreativeWork\"&gt;\\ ...\n [8] &lt;div class=\"quote\" itemscope itemtype=\"http://schema.org/CreativeWork\"&gt;\\ ...\n [9] &lt;div class=\"quote\" itemscope itemtype=\"http://schema.org/CreativeWork\"&gt;\\ ...\n[10] &lt;div class=\"quote\" itemscope itemtype=\"http://schema.org/CreativeWork\"&gt;\\ ...\n\n\nWe can extract all the elements, within the quote div, we might want to extract the text span. We can do this by using the selector div.quote .text, which selects all descendents of class .text which were descendents of div elements of class quote.\n\nquotes_html %&gt;% html_elements(\"div.quote .text\")\n\n{xml_nodeset (10)}\n [1] &lt;span class=\"text\" itemprop=\"text\"&gt;“The world as we have created it is a ...\n [2] &lt;span class=\"text\" itemprop=\"text\"&gt;“It is our choices, Harry, that show  ...\n [3] &lt;span class=\"text\" itemprop=\"text\"&gt;“There are only two ways to live your ...\n [4] &lt;span class=\"text\" itemprop=\"text\"&gt;“The person, be it gentleman or lady, ...\n [5] &lt;span class=\"text\" itemprop=\"text\"&gt;“Imperfection is beauty, madness is g ...\n [6] &lt;span class=\"text\" itemprop=\"text\"&gt;“Try not to become a man of success.  ...\n [7] &lt;span class=\"text\" itemprop=\"text\"&gt;“It is better to be hated for what yo ...\n [8] &lt;span class=\"text\" itemprop=\"text\"&gt;“I have not failed. I've just found 1 ...\n [9] &lt;span class=\"text\" itemprop=\"text\"&gt;“A woman is like a tea bag; you never ...\n[10] &lt;span class=\"text\" itemprop=\"text\"&gt;“A day without sunshine is like, you  ...\n\n\nFinally, we can extract the actual quote text content from the html elemenst we extracted using the html_text2 function. Putting it all together:\n\nquote_text &lt;- quotes_html %&gt;% html_elements(\"div.quote .text\") %&gt;%\n  html_text2()\n\nlength(quote_text)\n\n[1] 10\n\nquote_text[10]\n\n[1] \"“A day without sunshine is like, you know, night.”\"\n\n\nTASK: Try to write similar code to extract the name of the author of each quote.\n\n\nSolution\n\n\nauthors &lt;- quotes_html %&gt;% html_elements(\"div.quote .author\") %&gt;%\n  html_text2()\n\nauthors\n\n [1] \"Albert Einstein\"   \"J.K. Rowling\"      \"Albert Einstein\"  \n [4] \"Jane Austen\"       \"Marilyn Monroe\"    \"Albert Einstein\"  \n [7] \"André Gide\"        \"Thomas A. Edison\"  \"Eleanor Roosevelt\"\n[10] \"Steve Martin\"     \n\n\n\nWe could now also combine the text and the authors’ names in a dataframe:\n\nquote_df &lt;- tibble(Author=authors, Quote_text=quote_text)\nquote_df\n\n# A tibble: 10 × 2\n   Author            Quote_text                                                 \n   &lt;chr&gt;             &lt;chr&gt;                                                      \n 1 Albert Einstein   “The world as we have created it is a process of our think…\n 2 J.K. Rowling      “It is our choices, Harry, that show what we truly are, fa…\n 3 Albert Einstein   “There are only two ways to live your life. One is as thou…\n 4 Jane Austen       “The person, be it gentleman or lady, who has not pleasure…\n 5 Marilyn Monroe    “Imperfection is beauty, madness is genius and it's better…\n 6 Albert Einstein   “Try not to become a man of success. Rather become a man o…\n 7 André Gide        “It is better to be hated for what you are than to be love…\n 8 Thomas A. Edison  “I have not failed. I've just found 10,000 ways that won't…\n 9 Eleanor Roosevelt “A woman is like a tea bag; you never know how strong it i…\n10 Steve Martin      “A day without sunshine is like, you know, night.”         \n\n\nInvestigating the site more fully, you may notice that this is just the first page of several within the quotes to scrape website. We would like to extract data from each from each of these pages.\nHowever, as we mentioned we would like to do this is a ‘polite’ manner, obeying instructions in the sites robots.txt file (which tells where we are allowed to scrape), and not making page requests too quickly.\nWe can do this using the aptly-named polite R package, which interacts well with rvest.\nThere are three functions we need to use from the polite package, bow, scrape and nod.\n\nbow specifies what rate we should scrape at and parses the robots.txt file, as well as the base url of the site.\nscrape issues the http request to actually download the page.\nnod specifies any additional page we would like to scrape.\n\nWe can use these function to extract the same information as previously.\n\nlibrary(polite)\n\nWarning: package 'polite' was built under R version 4.3.3\n\npolite_connection &lt;- bow(\"https://quotes.toscrape.com/\")\n\n\npolite_connection %&gt;% scrape() %&gt;% \n  html_elements(\"div.quote .text\") %&gt;%\n  html_text2()\n\n [1] \"“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”\"                \n [2] \"“It is our choices, Harry, that show what we truly are, far more than our abilities.”\"                                              \n [3] \"“There are only two ways to live your life. One is as though nothing is a miracle. The other is as though everything is a miracle.”\"\n [4] \"“The person, be it gentleman or lady, who has not pleasure in a good novel, must be intolerably stupid.”\"                           \n [5] \"“Imperfection is beauty, madness is genius and it's better to be absolutely ridiculous than absolutely boring.”\"                    \n [6] \"“Try not to become a man of success. Rather become a man of value.”\"                                                                \n [7] \"“It is better to be hated for what you are than to be loved for what you are not.”\"                                                 \n [8] \"“I have not failed. I've just found 10,000 ways that won't work.”\"                                                                  \n [9] \"“A woman is like a tea bag; you never know how strong it is until it's in hot water.”\"                                              \n[10] \"“A day without sunshine is like, you know, night.”\"                                                                                 \n\n\nNow we are ready to extract quotes from all the pages on the site.\nThese pages have a predictable web address:\n\nhttps://quotes.toscrape.com/page/1/\nhttps://quotes.toscrape.com/page/2/\n…\n\nWe can use the nod function to direct our scraping to page 2:\n\npolite_connection %&gt;% \n  nod(\"page/2\") %&gt;% \n  scrape() %&gt;% \n  html_elements(\"div.quote .text\") %&gt;%\n  html_text2()\n\n [1] \"“This life is what you make it. No matter what, you're going to mess up sometimes, it's a universal truth. But the good part is you get to decide how you're going to mess it up. Girls will be your friends - they'll act like it anyway. But just remember, some come, some go. The ones that stay with you through everything - they're your true best friends. Don't let go of them. Also remember, sisters make the best friends in the world. As for lovers, well, they'll come and go too. And baby, I hate to say it, most of them - actually pretty much all of them are going to break your heart, but you can't give up because if you give up, you'll never find your soulmate. You'll never find that half who makes you whole and that goes for everything. Just because you fail once, doesn't mean you're gonna fail at everything. Keep trying, hold on, and always, always, always believe in yourself, because if you don't, then who will, sweetie? So keep your head high, keep your chin up, and most importantly, keep smiling, because life's a beautiful thing and there's so much to smile about.”\"\n [2] \"“It takes a great deal of bravery to stand up to our enemies, but just as much to stand up to our friends.”n [3] \"“If you can't explain it to a six year old, you don't understand it yourself.”n [4] \"“You may not be her first, her last, or her only. She loved before she may love again. But if she loves you now, what else matters? She's not perfect—you aren't either, and the two of you may never be perfect together but if she can make you laugh, cause you to think twice, and admit to being human and making mistakes, hold onto her and give her the most you can. She may not be thinking about you every second of the day, but she will give you a part of her that she knows you can break—her heart. So don't hurt her, don't change her, don't analyze and don't expect more than she can give. Smile when she makes you happy, let her know when she makes you mad, and miss her when she's not there.”\"                                                                                                                                                                                                                                                                                                                                                                                                   \n [5] \"“I like nonsense, it wakes up the brain cells. Fantasy is a necessary ingredient in living.”n [6] \"“I may not have gone where I intended to go, but I think I have ended up where I needed to be.”n [7] \"“The opposite of love is not hate, it's indifference. The opposite of art is not ugliness, it's indifference. The opposite of faith is not heresy, it's indifference. And the opposite of life is not death, it's indifference.”n [8] \"“It is not a lack of love, but a lack of friendship that makes unhappy marriages.”n [9] \"“Good friends, good books, and a sleepy conscience: this is the ideal life.”n[10] \"“Life is what happens to us while we are making other plans.”n\n\nWe can therefore now right an R function to extract the text and author name from each page:\n\nget_quote_text &lt;- function(page_no, polite_con){\n  quote_text &lt;- polite_con %&gt;% \n    nod(paste0(\"page/\", page_no)) %&gt;% \n    scrape() %&gt;% \n    html_elements(\"div.quote .text\") %&gt;%\n    html_text2()\n  author &lt;- polite_con %&gt;% \n    nod(paste0(\"page/\", page_no)) %&gt;% \n    scrape() %&gt;% \n    html_elements(\"div.quote .author\") %&gt;%\n    html_text2()\n  \n  out_df &lt;- tibble(Author=author, Quote_text=quote_text)\n  return(out_df)\n}\n\n\npage_1_df &lt;- get_quote_text(1,polite_connection)\n\nAt present we don’t know the last page number of the site. A simple way to find this out is to try a few:\n\nget_quote_text(10,polite_connection)\n\n# A tibble: 10 × 2\n   Author             Quote_text                                                \n   &lt;chr&gt;              &lt;chr&gt;                                                     \n 1 J.K. Rowling       \"“The truth.\\\" Dumbledore sighed. \\\"It is a beautiful and…\n 2 Jimi Hendrix       \"“I'm the one that's got to die when it's time for me to …\n 3 J.M. Barrie        \"“To die will be an awfully big adventure.”\"              \n 4 E.E. Cummings      \"“It takes courage to grow up and become who you really a…\n 5 Khaled Hosseini    \"“But better to get hurt by the truth than comforted with…\n 6 Harper Lee         \"“You never really understand a person until you consider…\n 7 Madeleine L'Engle  \"“You have to write the book that wants to be written. An…\n 8 Mark Twain         \"“Never tell the truth to people who are not worthy of it…\n 9 Dr. Seuss          \"“A person's a person, no matter how small.”\"             \n10 George R.R. Martin \"“... a mind needs books as a sword needs a whetstone, if…\n\n\n\nget_quote_text(20,polite_connection)\n\n# A tibble: 0 × 2\n# ℹ 2 variables: Author &lt;chr&gt;, Quote_text &lt;chr&gt;\n\n\n\nget_quote_text(11,polite_connection)\n\n# A tibble: 0 × 2\n# ℹ 2 variables: Author &lt;chr&gt;, Quote_text &lt;chr&gt;\n\n\nSo it turns out there are 10 pages of quotes. We can therefore write a for-loop to loop over all the pages and extract the information we need.\n\nquote_df &lt;- get_quote_text(1,polite_connection)\n\nfor (i in 2:10){\n  quote_df &lt;- rbind(quote_df, get_quote_text(i, polite_connection))\n  \n}\n\ndim(quote_df)\n\n[1] 100   2\n\nquote_df\n\n# A tibble: 100 × 2\n   Author            Quote_text                                                 \n   &lt;chr&gt;             &lt;chr&gt;                                                      \n 1 Albert Einstein   “The world as we have created it is a process of our think…\n 2 J.K. Rowling      “It is our choices, Harry, that show what we truly are, fa…\n 3 Albert Einstein   “There are only two ways to live your life. One is as thou…\n 4 Jane Austen       “The person, be it gentleman or lady, who has not pleasure…\n 5 Marilyn Monroe    “Imperfection is beauty, madness is genius and it's better…\n 6 Albert Einstein   “Try not to become a man of success. Rather become a man o…\n 7 André Gide        “It is better to be hated for what you are than to be love…\n 8 Thomas A. Edison  “I have not failed. I've just found 10,000 ways that won't…\n 9 Eleanor Roosevelt “A woman is like a tea bag; you never know how strong it i…\n10 Steve Martin      “A day without sunshine is like, you know, night.”         \n# ℹ 90 more rows\n\n\nWe now have a list of 100 quotes, which we have scraped from the several pages across the site. Obviously we can use this technique to scrape text data over a large number of pages, and then subsequently use text analysis techniques as discussed in that part of the course.\nExtra task\nIf you would like to practice, you may wish to have a go at scraping information from this site:\nhttps://books.toscrape.com/"
  },
  {
    "objectID": "Text-analysis.html",
    "href": "Text-analysis.html",
    "title": "Text Analysis",
    "section": "",
    "text": "Warning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nWarning: package 'tidytext' was built under R version 4.3.3\n\n\nLoading required package: Matrix\n\n\nWarning: package 'Matrix' was built under R version 4.3.3\n\n\n\nAttaching package: 'Matrix'\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\nLoaded glmnet 4.1-8"
  },
  {
    "objectID": "Text-analysis.html#introduction",
    "href": "Text-analysis.html#introduction",
    "title": "Text Analysis",
    "section": "Introduction",
    "text": "Introduction\nIn this workshop we will carry out some text analysis.\nI recommend typing each part of the example code below into an R script and running it, rather than copying and pasting. This help you internalise the process a little better and understand what is happening at each step.\nFeel free to experiment and change bits of the code. This is the best way to learn."
  },
  {
    "objectID": "Text-analysis.html#getting-started",
    "href": "Text-analysis.html#getting-started",
    "title": "Text Analysis",
    "section": "Getting started",
    "text": "Getting started\nBegin by opening Rstudio and create a project for this workshop (or use one you have already created for this course).\nSee this brief discussion of how to go about this.\nSee also this article about ways of working with R and Rstudio.\nWe will need to install some additional packages for this exercise. We will need the tidyverse set of packages, glmnet and keras but hopefully these are already installed from previous workshops. We will also use the ‘tidytext’ package, for analysing text in a tidy manner, the ‘stopwords’ package, to give a list of the most common English words, and the rsample package, for easily dividing data between training and test samples.\n\ninstall.packages(\"tidytext\")\ninstall.packages(\"rsample\")\ninstall.packages(\"broom\")\ninstall.packages(\"stopwords\")\nlibrary(tidytext)\nlibrary(rsample)\nlibrary(broom)\nlibrary(tidyverse)\nlibrary(glmnet)\nset.seed(100)\n\nRemember that you can always access the help for any R function if you need to by typing ? and the name of the function into the console.\n\n?unnest_tokens"
  },
  {
    "objectID": "Text-analysis.html#reading-text-data",
    "href": "Text-analysis.html#reading-text-data",
    "title": "Text Analysis",
    "section": "Reading text data",
    "text": "Reading text data\nOn the course blackboard page, you will find a zip file containing some bbc news datasets from the noughties.\nThis datasets is sourced from:\n\nD. Greene and P. Cunningham. “Practical Solutions to the Problem of Diagonal Dominance in Kernel Document Clustering”, Proc. ICML 2006.\n\nDownload these files in a folder within your project named data.\nThe data is organised into five categories, each contained in separate subfolders.\n\n# list all files and folders in the bbc directory\nbase_path &lt;- \"data/bbc\"\ncategories &lt;- list.files(base_path)\n# exclude the readme file\ncategories &lt;- categories[categories != \"README.TXT\"]\ncategories\n\n[1] \"business\"      \"entertainment\" \"politics\"      \"sport\"        \n[5] \"tech\"         \n\n\nWithin each subfolder, there are numbered text files each containing a separate individual article.\n\n# (note paste0 just sticks character strings together)\n# paste0(\"a\", \"bc\") gives \"abc\" as an output\npath_to_business &lt;- paste0(base_path, \"/\", categories[1])\nbusiness_files &lt;- list.files(path_to_business)\nbusiness_files[1:5]\n\n[1] \"001.txt\" \"002.txt\" \"003.txt\" \"004.txt\" \"005.txt\"\n\nlength(business_files)\n\n[1] 510\n\n\nWe can write some code to read in these files, and store them in a character vector:\n\n# at the moment we have the file names. We need the whole location (path) of the file to be able to read it in:\n\nbusiness_paths &lt;- paste0(path_to_business, \"/\", business_files) \n\nbusiness_paths[1]\n\n[1] \"data/bbc/business/001.txt\"\n\n# create an empty vector to store text in\nbus_articles &lt;- c()\n\n# for every file in the list of business article files\nfor (bus_file in business_paths){\n  # read in the article\n  bus_article &lt;- read_file(bus_file)\n  # add the article to the vector.\n  bus_articles &lt;- c(bus_articles, bus_article)\n}\n \nlength(bus_articles) \n\n[1] 510\n\nbus_articles[1]\n\n[1] \"Ad sales boost Time Warner profit\\n\\nQuarterly profits at US media giant TimeWarner jumped 76% to $1.13bn (£600m) for the three months to December, from $639m year-earlier.\\n\\nThe firm, which is now one of the biggest investors in Google, benefited from sales of high-speed internet connections and higher advert sales. TimeWarner said fourth quarter sales rose 2% to $11.1bn from $10.9bn. Its profits were buoyed by one-off gains which offset a profit dip at Warner Bros, and less users for AOL.\\n\\nTime Warner said on Friday that it now owns 8% of search-engine Google. But its own internet business, AOL, had has mixed fortunes. It lost 464,000 subscribers in the fourth quarter profits were lower than in the preceding three quarters. However, the company said AOL's underlying profit before exceptional items rose 8% on the back of stronger internet advertising revenues. It hopes to increase subscribers by offering the online service free to TimeWarner internet customers and will try to sign up AOL's existing customers for high-speed broadband. TimeWarner also has to restate 2000 and 2003 results following a probe by the US Securities Exchange Commission (SEC), which is close to concluding.\\n\\nTime Warner's fourth quarter profits were slightly better than analysts' expectations. But its film division saw profits slump 27% to $284m, helped by box-office flops Alexander and Catwoman, a sharp contrast to year-earlier, when the third and final film in the Lord of the Rings trilogy boosted results. For the full-year, TimeWarner posted a profit of $3.36bn, up 27% from its 2003 performance, while revenues grew 6.4% to $42.09bn. \\\"Our financial performance was strong, meeting or exceeding all of our full-year objectives and greatly enhancing our flexibility,\\\" chairman and chief executive Richard Parsons said. For 2005, TimeWarner is projecting operating earnings growth of around 5%, and also expects higher revenue and wider profit margins.\\n\\nTimeWarner is to restate its accounts as part of efforts to resolve an inquiry into AOL by US market regulators. It has already offered to pay $300m to settle charges, in a deal that is under review by the SEC. The company said it was unable to estimate the amount it needed to set aside for legal reserves, which it previously set at $500m. It intends to adjust the way it accounts for a deal with German music publisher Bertelsmann's purchase of a stake in AOL Europe, which it had reported as advertising revenue. It will now book the sale of its stake in AOL Europe as a loss on the value of that stake.\\n\"\n\n\nIn fact, R has nice tools for simplify tasks like this where we wish to do something to every element of a vector or list.\nThe map family of function takes two are arguments: - The first is a vector or list - The second is a function that should be applied to every element of that list\nThe results of each individual operation are stuck together and stored in a output vector. Depending on what type of output we get, we use different versions of the map function. Because we are working with characters and we want a character vector as our output, we use the map_chr version (there is also a map_dbl for numeric data, and map_df for dataframes).\n\nbus_articles &lt;- map_chr(business_paths, read_file)\nbus_articles[1]\n\n[1] \"Ad sales boost Time Warner profit\\n\\nQuarterly profits at US media giant TimeWarner jumped 76% to $1.13bn (£600m) for the three months to December, from $639m year-earlier.\\n\\nThe firm, which is now one of the biggest investors in Google, benefited from sales of high-speed internet connections and higher advert sales. TimeWarner said fourth quarter sales rose 2% to $11.1bn from $10.9bn. Its profits were buoyed by one-off gains which offset a profit dip at Warner Bros, and less users for AOL.\\n\\nTime Warner said on Friday that it now owns 8% of search-engine Google. But its own internet business, AOL, had has mixed fortunes. It lost 464,000 subscribers in the fourth quarter profits were lower than in the preceding three quarters. However, the company said AOL's underlying profit before exceptional items rose 8% on the back of stronger internet advertising revenues. It hopes to increase subscribers by offering the online service free to TimeWarner internet customers and will try to sign up AOL's existing customers for high-speed broadband. TimeWarner also has to restate 2000 and 2003 results following a probe by the US Securities Exchange Commission (SEC), which is close to concluding.\\n\\nTime Warner's fourth quarter profits were slightly better than analysts' expectations. But its film division saw profits slump 27% to $284m, helped by box-office flops Alexander and Catwoman, a sharp contrast to year-earlier, when the third and final film in the Lord of the Rings trilogy boosted results. For the full-year, TimeWarner posted a profit of $3.36bn, up 27% from its 2003 performance, while revenues grew 6.4% to $42.09bn. \\\"Our financial performance was strong, meeting or exceeding all of our full-year objectives and greatly enhancing our flexibility,\\\" chairman and chief executive Richard Parsons said. For 2005, TimeWarner is projecting operating earnings growth of around 5%, and also expects higher revenue and wider profit margins.\\n\\nTimeWarner is to restate its accounts as part of efforts to resolve an inquiry into AOL by US market regulators. It has already offered to pay $300m to settle charges, in a deal that is under review by the SEC. The company said it was unable to estimate the amount it needed to set aside for legal reserves, which it previously set at $500m. It intends to adjust the way it accounts for a deal with German music publisher Bertelsmann's purchase of a stake in AOL Europe, which it had reported as advertising revenue. It will now book the sale of its stake in AOL Europe as a loss on the value of that stake.\\n\"\n\n\nWe have read in all the business articles. However, we now want to do the same for the sports, politics, etc. articles.\nIdeally, we don’t want to have to repeat the same code for each article. This can make code difficult to read and it is very easy to introduce errors when copying and pasting code. Instead, we shall write our own function to read in articles for any given category, and create a data.frame that holds the text of the articles and their categories.\n\nAn aside: Writing R functions\nIf you are familiar with R functions, skip this part.\nAn R function can be defined by writing function followed by the names you want to give for the arguments to your function enclosed in parenthesis (arg1, arg2), followed by the code that describes what you want your function to do between curly brackets {}. A function should describe what should be returned (outputted) once it is finished.\nAn example is given below that computes the mean of the first argument, and then adds on the second argument. We wouldn’t ever write a function like this, as it is easier just to write this directly, but the below serves as a good example of how to write a function in R.\n\n# a silly example\nmy_func_name &lt;- function(argument1, argument2){\n  # do stuff here \n  mean_of_arg_1 &lt;- mean(argument1)\n  answer &lt;- mean_of_arg_1 + argument2\n  return(answer)\n}\n\nAs with existing R functions we can call this function by typing its name and providing the specific arguments we want to run the code with:\n\n# call (that is, use) the function \nmy_func_name(c(1,2,3), 5)\n\n[1] 7\n\n# call it with different arguments\nmy_func_name(c(4,5,6), -1)\n\n[1] 4\n\n\nNote that the names of arguments and any variables we create inside functions are removed after the function has finished running, so we can not now access argument1 or mean_of_arg_1 (try it and you should get a name error).\n\n\nBack to the BBC news data\nWe can write a function to read in all the files for one category\n\nread_category &lt;- function(category, bbc_path){\n  # The lines below has the same steps we went through above\n  category_path &lt;- paste0(bbc_path, \"/\", category)\n  category_files &lt;- list.files(category_path)\n  category_paths &lt;- paste0(category_path, \"/\", category_files) \n  category_articles &lt;- map_chr(category_paths, read_file)\n  \n  # code below creates a dataframe with column names \"Category\" and \"text\"\n  cat_df &lt;- tibble(Category=category, text=category_articles)\n  return(cat_df)\n}\n\nLet’s try this on a different category\n\ncategories[3]\n\n[1] \"politics\"\n\npol_df &lt;- read_category(categories[3], base_path)\npol_df\n\n# A tibble: 417 × 2\n   Category text                                                                \n   &lt;chr&gt;    &lt;chr&gt;                                                               \n 1 politics \"Labour plans maternity pay rise\\n\\nMaternity pay for new mothers i…\n 2 politics \"Watchdog probes e-mail deletions\\n\\nThe information commissioner s…\n 3 politics \"Hewitt decries 'career sexism'\\n\\nPlans to extend paid maternity l…\n 4 politics \"Labour chooses Manchester\\n\\nThe Labour Party will hold its 2006 a…\n 5 politics \"Brown ally rejects Budget spree\\n\\nChancellor Gordon Brown's close…\n 6 politics \"'Errors' doomed first Dome sale\\n\\nThe initial attempt to sell the…\n 7 politics \"Fox attacks Blair's Tory 'lies'\\n\\nTony Blair lied when he took th…\n 8 politics \"Women MPs reveal sexist taunts\\n\\nWomen MPs endure \\\"shocking\\\" le…\n 9 politics \"Campbell: E-mail row 'silly fuss'\\n\\nEx-No 10 media chief Alastair…\n10 politics \"Crucial decision on super-casinos\\n\\nA decision on whether to allo…\n# ℹ 407 more rows\n\n\nWe want all 5 categories in one dataframe to allow us to begin modelling.\nRather than constructing all 5 dataframes in separate bits of code, we can use map_df function to apply read_categories to all the elements of categories.\nThe below code may take a little time to run (but hopefully not too long). Reading lots of small files from disk is generally less efficient than reading one medium size file.\nNote that we also add a doc_id column, which gives each article a unique identification number, using the n() function to identify the maximum number of rows, and creating a sequence from 1 to this number (2225 in this case).\n\n# note that any additional arguments to read_category that do not change with each\n# iteration (in this case, base_path) can be given to map after the name of the function\ndata_df &lt;- map_df(categories, read_category, base_path) %&gt;% \n  # add unique id\n  mutate(doc_id=1:n()) %&gt;% \n  # reorder columns for convenience\n  select(doc_id, Category, text)\ndata_df\n\n# A tibble: 2,225 × 3\n   doc_id Category text                                                         \n    &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;                                                        \n 1      1 business \"Ad sales boost Time Warner profit\\n\\nQuarterly profits at U…\n 2      2 business \"Dollar gains on Greenspan speech\\n\\nThe dollar has hit its …\n 3      3 business \"Yukos unit buyer faces loan claim\\n\\nThe owners of embattle…\n 4      4 business \"High fuel prices hit BA's profits\\n\\nBritish Airways has bl…\n 5      5 business \"Pernod takeover talk lifts Domecq\\n\\nShares in UK drinks an…\n 6      6 business \"Japan narrowly escapes recession\\n\\nJapan's economy teetere…\n 7      7 business \"Jobs growth still slow in the US\\n\\nThe US created fewer jo…\n 8      8 business \"India calls for fair trade rules\\n\\nIndia, which attends th…\n 9      9 business \"Ethiopia's crop production up 24%\\n\\nEthiopia produced 14.2…\n10     10 business \"Court rejects $280bn tobacco case\\n\\nA US government claim …\n# ℹ 2,215 more rows"
  },
  {
    "objectID": "Text-analysis.html#tidying-text-data",
    "href": "Text-analysis.html#tidying-text-data",
    "title": "Text Analysis",
    "section": "Tidying Text Data",
    "text": "Tidying Text Data\nThe package tidytext has some nice tools for dealing with text data. The first of these is the unnest_tokens. This first splits each element in our column containing text into tokens, and then outputs a tidy data frame with one word per row.\n\ntoken_df &lt;- data_df %&gt;% \n  unnest_tokens(word, text, strip_numeric=TRUE)\n\ntoken_df\n\n# A tibble: 847,351 × 3\n   doc_id Category word     \n    &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;    \n 1      1 business ad       \n 2      1 business sales    \n 3      1 business boost    \n 4      1 business time     \n 5      1 business warner   \n 6      1 business profit   \n 7      1 business quarterly\n 8      1 business profits  \n 9      1 business at       \n10      1 business us       \n# ℹ 847,341 more rows\n\n\nThis allows us to easily do some exploratory analysis. For instance, we can find the most frequent words:\n\nwords_by_frequency &lt;- token_df %&gt;% count(word) %&gt;% arrange(-n) \nwords_by_frequency\n\n# A tibble: 30,773 × 2\n   word      n\n   &lt;chr&gt; &lt;int&gt;\n 1 the   52634\n 2 to    25113\n 3 of    20008\n 4 and   18611\n 5 a     18318\n 6 in    17725\n 7 for    8945\n 8 is     8555\n 9 that   8055\n10 on     7624\n# ℹ 30,763 more rows\n\n\nNot surprising, perhaps! Notice that there are around 30k words used in this corpus (as can be seen from the number of rows in the dataframe).\nWe can even look at the relationship between rank and frequency, as discussed in the lecture\n\n# without logging data, it is very difficult to see the relationship between rank and frequency, because frequency drops off very quickly:\nwords_by_frequency %&gt;% \n  mutate(Rank=1:n()) %&gt;% \n  ggplot(aes(x=Rank, y= n)) +\n  geom_line() + \n  theme_bw()\n\n\n\n\n\n\n\nwords_by_frequency %&gt;% \n  mutate(Rank=1:n()) %&gt;% \n  ggplot(aes(x=log(Rank), y= log(n))) +\n  geom_line() + \n  theme_bw()\n\n\n\n\n\n\n\n\nThis is a relatively small corpus, but there does seem to be an approximately log-log relationship here.\nWe probably want to exclude the most frequent words from our dataset. Don’t worry about the lexicon column.\n\n# nice convenience function from tidytext\nstops &lt;- get_stopwords()\n\nstops\n\n# A tibble: 175 × 2\n   word      lexicon \n   &lt;chr&gt;     &lt;chr&gt;   \n 1 i         snowball\n 2 me        snowball\n 3 my        snowball\n 4 myself    snowball\n 5 we        snowball\n 6 our       snowball\n 7 ours      snowball\n 8 ourselves snowball\n 9 you       snowball\n10 your      snowball\n# ℹ 165 more rows\n\n\nWe can exclude all the stop words from our token dataframe by using an antijoin. This compares two dataframes, and returns rows from the first dataframe which don’t appear in the second dataframe. The comparison is done based on a column shared by both columns. In this case, we can find all rows which contain words not in the word column of the stops dataframe.\n\n# antijoin finds everything in token_df NOT in stop, looking at the shared column 'word'\ntoken_df &lt;- token_df %&gt;% anti_join(stops)\n\nJoining with `by = join_by(word)`\n\n# lets find the top 5 words by category, now we've excluded the stops.\ntoken_df %&gt;% \n  count(Category, word) %&gt;%\n  group_by(Category) %&gt;%\n  arrange(Category, -n) %&gt;% top_n(10)\n\nSelecting by n\n\n\n# A tibble: 51 × 3\n# Groups:   Category [5]\n   Category word        n\n   &lt;chr&gt;    &lt;chr&gt;   &lt;int&gt;\n 1 business said     1680\n 2 business us        817\n 3 business year      686\n 4 business mr        600\n 5 business also      440\n 6 business market    429\n 7 business new       417\n 8 business growth    385\n 9 business company   367\n10 business last      367\n# ℹ 41 more rows\n\n\nThese look a bit more useful."
  },
  {
    "objectID": "Text-analysis.html#predicting-categories",
    "href": "Text-analysis.html#predicting-categories",
    "title": "Text Analysis",
    "section": "Predicting Categories",
    "text": "Predicting Categories\nNow that our data is tokenised and we have removed stop words, we want to convert it to a document term matrix, and attempt to build a classifier that predicts what category an article falls into.\nWe start by converting our data into a document-term matrix:\n\nsparse_dtm &lt;- token_df %&gt;%\n  # get counts of the number of times a word appears in a document\n  count(doc_id, word) %&gt;%\n  # turn into a document term matrix. \n  # doc_id specifies what should be collected in the document rows\n  # word identifies columns\n  # n is used for the values in the interior of the matrix.\n  cast_sparse(doc_id, word, n)\n\nThis gives us a sparse document term matrix with each row containing one article, and each column representing one word.\n\ndim(sparse_dtm)\n\n[1]  2225 30603\n\n# look at some of the columns and row entries\ncolnames(sparse_dtm)[50:60]\n\n [1] \"december\"  \"dip\"       \"division\"  \"earlier\"   \"earnings\"  \"efforts\"  \n [7] \"engine\"    \"enhancing\" \"estimate\"  \"europe\"    \"exceeding\"\n\n\nWe can see an example of what the interior of the document term matrix looks like for some words in one article. Here you can see that most values are zer.\n\nsparse_dtm[3,50:75]\n\n    december          dip     division      earlier     earnings      efforts \n           1            0            0            0            0            0 \n      engine    enhancing     estimate       europe    exceeding  exceptional \n           0            0            0            0            0            0 \n    exchange    executive     existing expectations      expects         film \n           0            0            0            0            0            0 \n       final    financial         firm  flexibility        flops    following \n           0            0            0            0            0            0 \n    fortunes       fourth \n           0            0 \n\n\nNext we will split our data into test and training datasets, by randomly choosing document ids using the rsample package:\n\nlibrary(rsample)\ndoc_ids &lt;- data_df %&gt;% \n  select(doc_id) \n\n# keep 80% of articles\nbbc_split &lt;- initial_split(doc_ids, prop=0.8)\n\ntrain_ids &lt;- training(bbc_split)\ntest_ids &lt;- testing(bbc_split)\n\ntrain_ids$doc_id[1:10]\n\n [1]  503 2035  470 1990 1540  823 1122  183 1528 1331\n\n\nLet’s split our sparse matrix into two matrixes, one that contains only the training set\n\n# get only the rows\nsparse_train_dtm &lt;- sparse_dtm[train_ids$doc_id,]\nsparse_test_dtm &lt;- sparse_dtm[test_ids$doc_id,]\n\nWe are going to fit a Lasso model to this data. We therefore need the correct category label as well as the document term matrix.\n\n # get elements from data that have doc_ids in the dataframe 'train_ids'\noutput_train_labels &lt;- train_ids %&gt;% \n  left_join(data_df %&gt;% select(doc_id, Category))\n\nJoining with `by = join_by(doc_id)`\n\noutput_train_labels \n\n# A tibble: 1,780 × 2\n   doc_id Category     \n    &lt;int&gt; &lt;chr&gt;        \n 1    503 business     \n 2   2035 tech         \n 3    470 business     \n 4   1990 tech         \n 5   1540 sport        \n 6    823 entertainment\n 7   1122 politics     \n 8    183 business     \n 9   1528 sport        \n10   1331 sport        \n# ℹ 1,770 more rows\n\n# do the same for the test set\noutput_test_labels &lt;- test_ids %&gt;% \n  left_join(data_df %&gt;% select(doc_id, Category))\n\nJoining with `by = join_by(doc_id)`\n\noutput_test_labels \n\n# A tibble: 445 × 2\n   doc_id Category\n    &lt;int&gt; &lt;chr&gt;   \n 1      9 business\n 2     10 business\n 3     19 business\n 4     27 business\n 5     39 business\n 6     40 business\n 7     41 business\n 8     45 business\n 9     49 business\n10     60 business\n# ℹ 435 more rows\n\n\nNotice that in this case, we have more predictor variables than observations. In other words \\(p &gt; n\\), which means that we are not able to use traditional regression models without regularisation."
  },
  {
    "objectID": "Text-analysis.html#lasso",
    "href": "Text-analysis.html#lasso",
    "title": "Text Analysis",
    "section": "Lasso",
    "text": "Lasso\nWe can now attempt to fit a Lasso model to predict new article category in the BBC data using glmnet. We specify alpha = 1 to focus on lasso models.\n\nmod_fit1 &lt;- cv.glmnet(sparse_train_dtm, \n                      output_train_labels$Category,\n                      family=\"multinomial\", alpha=1,\n                      type.measure=\"class\")\n\n\nlasso_diagnostics &lt;- tidy(mod_fit1)\n\nWe can plot the number of coefficients estimated as non-zero against the size of penalty \\(\\lambda\\). Here we can see that we that as the penalty size increases, more and more coefficients are shrunk to zero.\n\nlasso_diagnostics %&gt;%\n  ggplot(aes(x=lambda, y=nzero)) +\n  geom_line() + \n  theme_bw() + \n  ggtitle(\"Non-zero coefficients against penalty size\")\n\n\n\n\n\n\n\n\nLooking at the best lambda value, we can see that this involves about only a small number of non-zero coefficients (out of about 30k for each class)!\n\nbest_lambda &lt;- lasso_diagnostics %&gt;% \n  filter(estimate==min(estimate)) %&gt;% \n  # if there are ties, pick the model with the least number of non-zero \n  # coefficients.\n  filter(nzero==min(nzero))\nbest_lambda_val &lt;- best_lambda$lambda\n\nbest_lambda\n\n# A tibble: 1 × 6\n  lambda estimate std.error conf.low conf.high nzero\n   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 0.0142   0.0489   0.00427   0.0446    0.0532    90\n\n\nPlotting lambda against estimated class error, we can see that the bigger values of lambda perform significantly worse at the classification task.\n\nlasso_diagnostics %&gt;%\n  ggplot(aes(x=lambda, y=estimate)) +\n  geom_point() + \n  geom_linerange(aes(ymin=conf.low,\n                     ymax=conf.high)) +\n  geom_vline(xintercept = best_lambda_val) + \n  theme_bw() + \n  ggtitle(\"Classification error against penalty size\")\n\n\n\n\n\n\n\n\nWe can look at the performance against the held-out test data to see how well the classifier performed.\n\npreds &lt;- predict(mod_fit1, sparse_test_dtm,type=\"class\")\npreds[1:5]\n\n[1] \"business\" \"business\" \"business\" \"business\" \"business\"\n\n# what proportion of the predicted labels are different from the actual labels\nsum(preds != output_test_labels$Category) / length(output_test_labels$Category)\n\n[1] 0.06067416\n\n\nWe only get around 5-6% of cases wrong in this case.\nThere is built-in function that will tell us the same thing:\n\nassess.glmnet(mod_fit1, sparse_test_dtm, output_test_labels$Category,\n              family=\"multinomial\")$class\n\n[1] 0.06067416\nattr(,\"measure\")\n[1] \"Misclassification Error\"\n\n\nWe can also extract the values of the non-zero efficients from glmnet. Below is code to plot the top 10 coefficients for each class.\n\ntidied_coefs &lt;- tidy(mod_fit1$glmnet.fit, return_zeros=F)\n\ntidied_coefs\n\n# A tibble: 43,282 × 6\n   class    term   step estimate lambda dev.ratio\n   &lt;chr&gt;    &lt;chr&gt; &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n 1 business \"\"        1    0.153  0.201  8.33e-15\n 2 business \"\"        2    0.156  0.192  6.65e- 3\n 3 business \"\"        3    0.160  0.183  1.33e- 2\n 4 business \"\"        4    0.167  0.175  2.69e- 2\n 5 business \"\"        5    0.182  0.167  5.24e- 2\n 6 business \"\"        6    0.196  0.159  7.48e- 2\n 7 business \"\"        7    0.210  0.152  9.74e- 2\n 8 business \"\"        8    0.214  0.145  1.24e- 1\n 9 business \"\"        9    0.219  0.139  1.50e- 1\n10 business \"\"       10    0.218  0.132  1.77e- 1\n# ℹ 43,272 more rows\n\ntidied_coefs %&gt;% \n  # only look at coefficients for the lambda with the best cv score\n  filter(lambda==best_lambda_val) %&gt;% \n  # for each class, find the top 10 coefficients \n  group_by(class) %&gt;% \n  top_n(10, abs(estimate)) %&gt;%\n  # plot the estimate for each term.\n  ggplot(aes(x=term,y=estimate)) + \n  geom_col() +\n  # do this separately for each category (class)\n  facet_wrap(~class, scales=\"free\") +\n  # rotate the plot through 90 degrees so the labels are easier to read.\n  coord_flip()\n\n\n\n\n\n\n\n\nWe still have at least one number here, which looks a bit to specific, and so are probably not ideal - we could filter these out before fitting if we wanted."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RESM3002_Workshops",
    "section": "",
    "text": "This is the landing page for the R workshops for Jason Hilton’s part of the course RESM3002 ’Advanced Social Data Science”.\n\nIntroduction to R\nTidyverse and Data Visualisation\nText Analysis\nWeb Scraping"
  },
  {
    "objectID": "Introduction-to-R.html",
    "href": "Introduction-to-R.html",
    "title": "Introduction to R",
    "section": "",
    "text": "R is different from other tools you may have used.\nIn Excel, the calculations we carry out in the data are embedded in the spreadsheet containing the data we are working with, in the form of formulas. In contrast, with R, data storage and calculations are generally separated. In SPSS, we generally point and click on menu options and dialog boxes to allow us to perform statistical analyses. In R, we instead write particular instructions in the form of code. 1\nThis is because R is a statistical programming language. We write out the particular steps we need to take in one or more scripts - text files containing code. Using a programming language to do data analysis has a number of advantages:\n\nAutomation. We can set our analyses to run without manually having to oversee every step.\nReusability. Parts of our code can be used when we have to do similar tasks in other projects. This is particularly the case when we write functions (on which more later).\nScalability. Because our analyses are automated, it is easy to repeat on larger volumnes of data.\n\nReproducability. If we pass our script to someone else, they can obtain the same results as us, given the same data."
  },
  {
    "objectID": "Introduction-to-R.html#what-is-r",
    "href": "Introduction-to-R.html#what-is-r",
    "title": "Introduction to R",
    "section": "",
    "text": "R is different from other tools you may have used.\nIn Excel, the calculations we carry out in the data are embedded in the spreadsheet containing the data we are working with, in the form of formulas. In contrast, with R, data storage and calculations are generally separated. In SPSS, we generally point and click on menu options and dialog boxes to allow us to perform statistical analyses. In R, we instead write particular instructions in the form of code. 1\nThis is because R is a statistical programming language. We write out the particular steps we need to take in one or more scripts - text files containing code. Using a programming language to do data analysis has a number of advantages:\n\nAutomation. We can set our analyses to run without manually having to oversee every step.\nReusability. Parts of our code can be used when we have to do similar tasks in other projects. This is particularly the case when we write functions (on which more later).\nScalability. Because our analyses are automated, it is easy to repeat on larger volumnes of data.\n\nReproducability. If we pass our script to someone else, they can obtain the same results as us, given the same data."
  },
  {
    "objectID": "Introduction-to-R.html#this-tutorial",
    "href": "Introduction-to-R.html#this-tutorial",
    "title": "Introduction to R",
    "section": "This tutorial",
    "text": "This tutorial\nThe aim of this worksheet is to introduce you to the basics of R. Nothing will be very complicated - and in fact, the examples are deliberately very simple - but there will be a lot to take in all at once, and it might take you a while to digest everything. The more you work with R, the more these things will become second nature, however. Don’t be afraid to try your own examples in the worksheet below.\nMost of the time we will work with R using the desktop application called Rstudio. For the first part of this tutorial, we will use a web interface to R called webr. This will allow us to keep things simple and focus on R itself. The interactive R code boxes (like the one below) allow us to run particular R commands or chunks of code by clicking the Run Code button.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also edit the code in the code chunks. Try editing the code above, replacing the + with -, for example.\nTry doing some other calculations below.\nYou can use the standard mathematical symbols. to do this: +, -, /. Note that * is used for multiplication, and ** or ^ to raise something to a power. In R code, these symbols are called operators.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Introduction-to-R.html#r-objects.",
    "href": "Introduction-to-R.html#r-objects.",
    "title": "Introduction to R",
    "section": "R Objects.",
    "text": "R Objects.\nGenerally, we want to use the results of one calculation in the next step of our analysis. We therefore store the results of as objects. To create an R object, we first write the name we would like to give the object, followed by an arrow symbol created by the \\(&lt;\\) and \\(-\\) symbols next to each other, followed by the thing we want to store.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote that you can’t have spaces in the names of R objects, as these are used to separate different bits of R code. If you try to do create an object with a space in it, you will get an error message (see below for more on error messages).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nR objects come in many different forms, from single numbers to whole datasets, and from chunks of text to the results of regression analysis.\nWhen R objects are simply numbers, we can perform simple calculations with them as we did with the ‘raw’ numbers.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Introduction-to-R.html#types-of-data",
    "href": "Introduction-to-R.html#types-of-data",
    "title": "Introduction to R",
    "section": "Types of data",
    "text": "Types of data\nThere are several basic types of data in R, from which more complicated data structures are built.\n\nNumeric\nAs the name suggests, this type corresponds to numeric data, including decimals (or ‘doubles’). 2. We can create a numeric object in the same way as we did above:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote that if we just type the name of an object into R, it’s value or ther information about it will be printed to screen.\n\n\nCharacter\nThis type corresponds to text data, and we indicate to R that we are working with such data by enclosing the text in quotes \"\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nLogical\nThis type can only ever be one of two values, TRUE or FALSE. Sometimes, you will see these used in abbreviated fashion as T or F.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Introduction-to-R.html#functions",
    "href": "Introduction-to-R.html#functions",
    "title": "Introduction to R",
    "section": "Functions",
    "text": "Functions\nFunctions are pre-existing bits of R code that we can re-use to perform a specific task.\nSuch tasks include loading a dataset, calculating the data’s descriptive statistics, and running a simple linear regression.\nYou can also use functions to do simple tasks such as computing a mean or rounding a variable.\n\nTo ‘call’ (use) a function, you must write the function name followed by the things you want that function to use as inputs to its task (the ‘arguments’) enclosed in parentheses:\n\nfunction(argument1, argument2, ...)\n\nThese arguments could be data stored in R objects, files to open or options controlling the behaviour etc\nThere may by only one argument or several, and in some cases there may be zero.\n\nFor example, if you want to round the number 3.1415 you can use the function round\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNB: the real value of \\(\\pi\\) is stored in the pre-existing object pi.\nThe functions may have more than one argument. The order in which arguments are written determines how they are used by the function. With the round argument, the second argument tells R how many digits to keep after the decimal point when rounding.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe digits argument is optional, so if it is not specified, the default value of 0 is used instead. Instead of using the position of the arguments, we can use the name of the arguments instead. The round functions arguments are named x (the thing to be rounded) and digits.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can find out the names of the arguments to any particular functions by accessing it’s help file - on which more below."
  },
  {
    "objectID": "Introduction-to-R.html#data-structures",
    "href": "Introduction-to-R.html#data-structures",
    "title": "Introduction to R",
    "section": "Data Structures",
    "text": "Data Structures\nThe basic data types can be combined within data structures. R has several of these.\n\nVectors\nVectors are the simplest of the data types. We can create vectors using the c() function, with elements of the vector separated by commas:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can even make vectors using strings instead of numerical values\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou cannot mix data types within a vector, however:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can also create vectors consisting of a range of integers by writing the start and end of the range you want, separated by a colon:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSometimes, we want to select particular elements from within a vector. To do this, we write the name of the vector, followed by square brackets, and the position of the thing we want within the vector.\nFor instance, if we want the second element from the list of cat names, we write:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can select more than one element using ‘slicing’. We use the same range method as before:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can find the length of a vector using the length function.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n}}\n\n\nAn aside: The help function\nTo find our more information about a particular function, we can use the help function. For instance, to find out more about the mean function, we can call the help function with mean as the argument:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis is usually instantaneous, but takes a few seconds in the web version of R.\nTry to calculate the mean of the first 5 numbers of the my_numbers vector we created above.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nNA values\nYou may have noticed in the help file for the mean function, there is an argument to the function called na.rm. This stands for ‘NA remove’. NA stands for ‘Not Available’, and is used by R to represent missing values. If we try to calculate the mean of a vector containing missing values, we will obtain a missing value. This is to ensure that we always no when we might have a problem with our calculations due to missing or invalid data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWhat do you think seq is doing in the code above? Try using the seq function in the space below, and use the help function to find out how it works. Some of the help file may be confusing, but focus on the bits under the argument heading Arguments and Value.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCalculate the mean of my_data without the NA value. Do this using the mean function, and via indexing.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nLists\nLists are very similar to vectors, but can include data of different types. This means calculations with them are a bit slower, but they are more flexible.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can extract specific elements from a list using the $ symbol:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also index elements, but to extract them we should use the double square brackets:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nData frames\nThese are probably the data structure in R you will use most often. They are used for holding whole datasets. Practically speaking, they are lists of vectors of equal length.\nThe built-in dataset iris is a good example of a dataframe. We can look at the first few rows of this dataframe using the head function:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAs with lists, we can access particular columns using the $ symbol.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAs with vectors, we can slice away particular parts of the dataframe. In this case we select the 10th to the 20th row, and the second and third column.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also do this by name:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nCheck you understand what the above code is doing, using the help function if necessary.\n\n\nMatrix\nA matrix is another collection of vectors, but is somewhat simpler than a dataframe. All elements of a matrix must have the same type, and column names are not required. We create a matrix using the matrix function ( surprise surprise), often from vectors.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Introduction-to-R.html#conditions",
    "href": "Introduction-to-R.html#conditions",
    "title": "Introduction to R",
    "section": "Conditions",
    "text": "Conditions\nLogical data results whenever we use conditions. For instance, we might check if value of variable is greater than a particular number, using the greater than &gt; operator.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also use the &lt;, &gt;= and &lt;= operators to check for “less than”, “greater than or equal to”, or “less than or equal to” relationships.\nTo test whether to values are equal, we can use the ==, which means “is equal to”. Note that we must use two = symbols, otherwise our code will not work.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThese logical conditions are important when writing R code, because it allows our R scripts to do different things depending on what inputs are given to it.\nWe do this using if / else clauses:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf the condition beside the if statement is true, the first print statement is executed (run). Otherwise, the part in the else clause is run (the bit enclosed in else{…})."
  },
  {
    "objectID": "Introduction-to-R.html#errors-in-r",
    "href": "Introduction-to-R.html#errors-in-r",
    "title": "Introduction to R",
    "section": "Errors in R",
    "text": "Errors in R\nWhen we do something wrong, R will give us an error message. At first, these can seem quite mysterious. It is important to read error messages, however, because they often help you understand what you have done wrong.\n\nSubscript out of bounds. This means that you have tried to go beyond the end of a vector, list or dataframe. For example, you have tried to access the 10th number in a list that is only 9 numbers long. You can find out how long a list is by using the function length. Similarly, the function dim (for ‘dimension’) tells you the number of rows and columns in a dataframe.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nnon-numeric argument to binary operator. This sounds like gibberish, but generally it just means your data is of the wrong type. An operator in R represents a mathematical calculation like +, -, *, or /. If we try to use these, for instance, text data, we get this error.\n\nRun the code below, and see if you can work out how to fix it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOften this can happen when you read in data that has a mix of numeric an character data in one of the columns.\n\nobject \"unicorn\" was not found. This error occurs when you try to access an R object (unicorn in this case) that doesn’t exist. This could be because you have typed the name wrong, or because you are running your code in the wrong order and you haven’t created it yet.\n\nSee the example below and try to fix it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCould not find function \"help_me\". Similarly, this happens when you try to use a function that doesn’t exist. This might be because of a mis-typing 3. See the example below.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nObject of type 'closure' is not subsettable Another strange-sounding message. This occurs when you try to use indexing on a function:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Introduction-to-R.html#doing-stuff-lots-of-times",
    "href": "Introduction-to-R.html#doing-stuff-lots-of-times",
    "title": "Introduction to R",
    "section": "Doing stuff lots of times",
    "text": "Doing stuff lots of times\nOften, we want to repeat the same chunk of code many times. For-loops are one way of doing this. These take values from a vector or list one at a time, and storing each value in iteration in an iteration variable, often called i.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nVectorisation\nIf we wanted to add two vectors together, we could do this using a for loop:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHowever, R has built in ways of dealing with simple operations on vectors. Mathematical operations on vectors in R are automatically vectorised - the first elements of each vector are added together and stored in first element of the answer object, and the same happens with each subsequent position:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNot everything can be easily vectorised, however, and for particularly complex calculations, it may be necessary to write for loops."
  },
  {
    "objectID": "Introduction-to-R.html#using-r-from-r-studio",
    "href": "Introduction-to-R.html#using-r-from-r-studio",
    "title": "Introduction to R",
    "section": "Using R from R Studio",
    "text": "Using R from R Studio\nRstudio is a good way to work with R.\n\nR and RStudio are available for free, so if you would like to download them onto your PC follow these instructions: \nYou need to download both. R is a programming language, whereas RStudio is an application (an interface) that helps you write in that language\nOn a university PC, open the start menu and start typing Rstudio and you should see the rstudio icon appear\nTo launch RStudio on your own machine, once installed, click on the RStudio icon:"
  },
  {
    "objectID": "Introduction-to-R.html#rstudio-interface",
    "href": "Introduction-to-R.html#rstudio-interface",
    "title": "Introduction to R",
    "section": "RStudio Interface",
    "text": "RStudio Interface\nFrom this point, you should work with Rstudio rather than with webR.\nWhen you open Rstudio, you will see something that looks like the image below.\n\nThe different bits of the Rstudio window have been labelled in yellow in the image, and are explained in more detail below.\n\nThe console/command window is where you can type commands. Type the command next to the \\(&gt;\\) sign and press ENTER\nThe editor/script window is where you can edit and save commands. To run commands from here highlight the command and either click Run or type CTRL+ENTER. This will run the line your cursor is currently on, or the code you have highlighted (which could be multiple lines).\nThe environment pane of the environment/history window shows the data you have loaded and any values your have created during your session. You can have a closer look by clicking on them. The history pane shows a history of your typed commands\nThe files/plots/packages/help window has panes that allow you to open files, view plots, install and load packages, or use the help function"
  },
  {
    "objectID": "Introduction-to-R.html#project-management",
    "href": "Introduction-to-R.html#project-management",
    "title": "Introduction to R",
    "section": "Project Management",
    "text": "Project Management\n\nTo be able to work effectively we will create “RStudio projects” which is a feature of RStudio that allows us to keep the data, code and outputs for one project in one folder.\nThis organizes our work, helps us prevent mistakes when loading and saving files, and makes it easier to switch between different projects.\nWithin a project, group together all code relating to a particular step in a separate scripts. A script is just a file containing R code.\nScripts can be saved in the project folder (you might like to create a folder called scripts within your folder), and they can be revisited and amended\nBy adding comments in our scripts, we can add notes explaining what each command is meant to do. This might help others understand our thought process, or even the Future You who revisits your code at a later date!"
  },
  {
    "objectID": "Introduction-to-R.html#rstudio-project",
    "href": "Introduction-to-R.html#rstudio-project",
    "title": "Introduction to R",
    "section": "RStudio Project",
    "text": "RStudio Project\nTo create a new project in RStudio:\n\nClick on “File”, then click on “New Project”\nClick on “New Directory”\nClick on “New Project”\nBrowse, find and choose the area where you want to save your project folder in the box: “Create project as subdirectory of”, and then type in the box “Directory name” the name of the folder where your project will be stored. This will create both the folder and the project within it\nClick on “Create Project”\n\nTo open an “existing project” in RStudio, go to the project folder (directory) and double click on the .Rproj file in that directory.\nAlternatively, you can use the open project dialog in the menu on the top right of the Rstudio screen."
  },
  {
    "objectID": "Introduction-to-R.html#script",
    "href": "Introduction-to-R.html#script",
    "title": "Introduction to R",
    "section": "Script",
    "text": "Script\nOnce you create an RStudio Project, then you should create a Script. To create a Script:\n\nClick on “File”, then click on “New File” and then click on “R Script”\nThe R Script will open in the upper left window and will be untitled and not saved yet\nClick on the “save” button at the top of the Script and your project folder will open\nType the name you want to give to your Script in the “File name” box and press “Save”. Your Script will show in your bottom-right Files window"
  },
  {
    "objectID": "Introduction-to-R.html#the-r-user-interface",
    "href": "Introduction-to-R.html#the-r-user-interface",
    "title": "Introduction to R",
    "section": "The R User Interface",
    "text": "The R User Interface\n\nOnce you type a command in the command window and press enter, the result will show right underneath it\nYou will notice that the result shows next to this: [1]. This indicates the first value of your result, and if more values are produced, more of those bracketed numbers will appear at the start of the result lines\nIf you write and run an incomplete command, R will display a + prompt indicating that it is waiting for you to type the rest of the command\nIf you type a command that R doesn’t recognize, it will return an error message\nIf you want to add comments in your code, add a # at the beginning of the comment. R will not run anything that follows a # on a line. Comments appear in green"
  },
  {
    "objectID": "Introduction-to-R.html#packages-in-r",
    "href": "Introduction-to-R.html#packages-in-r",
    "title": "Introduction to R",
    "section": "Packages in R",
    "text": "Packages in R\nPackages are collections of R code designed to perform specific tasks. These may be included in R by default, or they may be written by other R users. R has a vibrant community of statisticians, data scientists, biologists, epidemiologists, economists, geographers, etc. etc. who contribute code relating to their discipline.\nTo use functions from a package, we first need to load it from our package library using the library function.\nFor instance, we can load in the rpart package for tree-based models (on which more later in the course). This package is included in the base R installation.\nDon’t worry about what the code is doing for the moment, just notice that if we try to use a function from the rpart package without first loading the package we get an error:\n\nfit &lt;- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)\n\nError in rpart(Kyphosis ~ Age + Number + Start, data = kyphosis): could not find function \"rpart\"\n\nfit\n\nError in eval(expr, envir, enclos): object 'fit' not found\n\n\n\nlibrary(rpart)\nfit &lt;- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)\nfit\n\nn= 81 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n 1) root 81 17 absent (0.79012346 0.20987654)  \n   2) Start&gt;=8.5 62  6 absent (0.90322581 0.09677419)  \n     4) Start&gt;=14.5 29  0 absent (1.00000000 0.00000000) *\n     5) Start&lt; 14.5 33  6 absent (0.81818182 0.18181818)  \n      10) Age&lt; 55 12  0 absent (1.00000000 0.00000000) *\n      11) Age&gt;=55 21  6 absent (0.71428571 0.28571429)  \n        22) Age&gt;=111 14  2 absent (0.85714286 0.14285714) *\n        23) Age&lt; 111 7  3 present (0.42857143 0.57142857) *\n   3) Start&lt; 8.5 19  8 present (0.42105263 0.57894737) *"
  },
  {
    "objectID": "Introduction-to-R.html#installing-packages",
    "href": "Introduction-to-R.html#installing-packages",
    "title": "Introduction to R",
    "section": "Installing packages",
    "text": "Installing packages\nMost packages do not come pre-installed. We install them using the install.packages function. Try running the code below in Rstudio:\n\ninstall.packages(\"tibble\")\n\nUnlike when you are using the library() function, you must enclose the name of the package you wish to install in quotes, or else you will get an error. The tibble package provide easier-to-read dataframes, along with additional special features.\n\nlibrary(tibble)\n\nas_tibble(iris)\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n\n\nNote that you only need to install a package once on each machine that you are using [^4]\n[4:] New versions of R packages are frequently released, so you will need to update the version you have installed sometimes.\nHousekeeping tip! When you write a script, begin by loading all your packages at the very top of the script."
  },
  {
    "objectID": "Introduction-to-R.html#create-new-variables-in-the-dataframe",
    "href": "Introduction-to-R.html#create-new-variables-in-the-dataframe",
    "title": "Introduction to R",
    "section": "Create new variables in the dataframe",
    "text": "Create new variables in the dataframe\nSome logical operators that you should know are the following:\n\n& means AND, it returns TRUE if the conditions on both sides of the & are TRUE\n| means OR, it returns TRUE when at least of the two sides are TRUE\n! means NOT, it returns FALSE if the logical variable is TRUE\n== means EQUALS, it is used when specifying a value of an existing variable in and if statement\nTo access a variable in a dataframe, use $ after the name of the dataframe\n\n\n#The function `head` will only let us see the first few values\nhead(my_data$age)\n\n[1] 31 33 32 34 30 36\n\n\n\nTo create a new binary variable you can use the $ to name it and ifelse arguments to specify its values with respect to other variables in the dataframe\n\n\nmy_data$age_dummy &lt;- ifelse(my_data$age &lt; 35, \"young\", \"old\")\ntable(my_data$age_dummy)\n\n\n  old young \n  231   432 \n\n\n##Create new variables in the dataframe\n\nTo create a new categorical variable you can use the $ to name it and the cut function to specify its values with respect to other variables in the dataframe\n\n\nmy_data$age_group &lt;- cut(my_data$age, c(27, 30,34, 38))\ntable(my_data$age_group)\n\n\n(27,30] (30,34] (34,38] \n    186     246     231"
  },
  {
    "objectID": "Introduction-to-R.html#descriptive-statistics-in-rstudio",
    "href": "Introduction-to-R.html#descriptive-statistics-in-rstudio",
    "title": "Introduction to R",
    "section": "Descriptive Statistics in RStudio",
    "text": "Descriptive Statistics in RStudio\n\nOnce you have loaded your data and named it as an object (mydata in the example above), you can estimate some basic by typing the following command:\n\n\nsummary(my_data)\n\n      wage            hours             IQ             KWW       \n Min.   : 115.0   Min.   :25.00   Min.   : 54.0   Min.   :13.00  \n 1st Qu.: 699.0   1st Qu.:40.00   1st Qu.: 94.0   1st Qu.:32.00  \n Median : 937.0   Median :40.00   Median :104.0   Median :37.00  \n Mean   : 988.5   Mean   :44.06   Mean   :102.5   Mean   :36.19  \n 3rd Qu.:1200.0   3rd Qu.:48.00   3rd Qu.:113.0   3rd Qu.:41.00  \n Max.   :3078.0   Max.   :80.00   Max.   :145.0   Max.   :56.00  \n      educ           exper          tenure            age       \n Min.   : 9.00   Min.   : 1.0   Min.   : 0.000   Min.   :28.00  \n 1st Qu.:12.00   1st Qu.: 8.0   1st Qu.: 3.000   1st Qu.:30.00  \n Median :13.00   Median :11.0   Median : 7.000   Median :33.00  \n Mean   :13.68   Mean   :11.4   Mean   : 7.217   Mean   :32.98  \n 3rd Qu.:16.00   3rd Qu.:15.0   3rd Qu.:11.000   3rd Qu.:36.00  \n Max.   :18.00   Max.   :22.0   Max.   :22.000   Max.   :38.00  \n    married           south            urban             sibs       \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   : 0.000  \n 1st Qu.:1.0000   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.: 1.000  \n Median :1.0000   Median :0.0000   Median :1.0000   Median : 2.000  \n Mean   :0.9005   Mean   :0.3228   Mean   :0.7195   Mean   : 2.846  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.: 4.000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :14.000  \n    brthord           meduc           feduc           lwage      \n Min.   : 1.000   Min.   : 0.00   Min.   : 0.00   Min.   :4.745  \n 1st Qu.: 1.000   1st Qu.: 9.00   1st Qu.: 8.00   1st Qu.:6.550  \n Median : 2.000   Median :12.00   Median :11.00   Median :6.843  \n Mean   : 2.178   Mean   :10.83   Mean   :10.27   Mean   :6.814  \n 3rd Qu.: 3.000   3rd Qu.:12.00   3rd Qu.:12.00   3rd Qu.:7.090  \n Max.   :10.000   Max.   :18.00   Max.   :18.00   Max.   :8.032  \n  age_dummy           age_group  \n Length:663         (27,30]:186  \n Class :character   (30,34]:246  \n Mode  :character   (34,38]:231  \n                                 \n                                 \n                                 \n\n\n\nThis will produce the mean, median, the 25th and 75th quartiles, and the minimum and maximum values in the sample"
  },
  {
    "objectID": "Introduction-to-R.html#linear-regression-in-rstudio",
    "href": "Introduction-to-R.html#linear-regression-in-rstudio",
    "title": "Introduction to R",
    "section": "Linear Regression in RStudio",
    "text": "Linear Regression in RStudio\n\nTo run a linear regression, you type the following command:\n\n\nregression &lt;- lm(dependent ~ independent1 + independent2, data=my_data)\n\nwhere “regression” is the name of the object that contains the regression results, “dependent” is the name of the dependent variable (\\(y\\)) in the data, and “independent1” and “independent2” are the names of the independent variables (\\(x\\)) in the data.\n\nAfter the comma we tell R which dataframe to use to run this regression\nOnce we run the regression, we need to run another command to display the results:\n\n\nsummary(regression) \n\nwhere “summary” is the function that calls the results of the regression, and “regression” is the name I chose for the object that contains the regression results\nTASK: Try running a linear regression model using the wage2.xls data."
  },
  {
    "objectID": "Introduction-to-R.html#further-resources",
    "href": "Introduction-to-R.html#further-resources",
    "title": "Introduction to R",
    "section": "Further Resources",
    "text": "Further Resources\n\nIsmay, C and Kim, A.Y. Statistical Inference via Data Science CRC Press\nGrolemund G., Hands-On Programming with R, O’REILLY, 2014, https://rstudio-education.github.io/hopr/index.html, Open Source\nHanck C., Arnold M., Gerber A., and Schmelzer M, Introduction to Econometrics with R, University of Duisburg-Essen, 2020, https://www.econometrics-with-r.org/index.html, Open Source"
  },
  {
    "objectID": "Introduction-to-R.html#footnotes",
    "href": "Introduction-to-R.html#footnotes",
    "title": "Introduction to R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIt is possible to write SPSS code (called syntax) to carry out particular statistical analyses. Similarly, it is possible to write code to perform particular tasks in excel (called ‘Macros’, using a language called Visual Basic). However, while useful, R has a wider array of features and tools available.↩︎\nTechnically, the numeric type includes both ‘double’ (decimal or real) and ‘integer’ data types. But most of the time you won’t need to worry about this. It is also possible to store complex numbers, which have their own type (but again, don’t worry if this doesn’t mean anything to you).↩︎\nAlternatively, it could be because you are trying to use a function from a package that isn’t loaded yet. See the section on packages.↩︎"
  },
  {
    "objectID": "Tidyverse-and-visualisation.html",
    "href": "Tidyverse-and-visualisation.html",
    "title": "Tidyverse and Data Visualisation",
    "section": "",
    "text": "here() starts at E:/projects/teaching/RESM3002/RESM3002_Workshops\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "Tidyverse-and-visualisation.html#introduction",
    "href": "Tidyverse-and-visualisation.html#introduction",
    "title": "Tidyverse and Data Visualisation",
    "section": "Introduction",
    "text": "Introduction\nIn this workshop we will carry out some visualisation using ggplot2.\nI recommend typing each part of the example code below into an R script and running it, rather than copying and pasting. This help you internalise the process a little better and understand what is happening at each step.\nFeel free to experiment and change bits of the code. This is the best way to learn."
  },
  {
    "objectID": "Tidyverse-and-visualisation.html#getting-started",
    "href": "Tidyverse-and-visualisation.html#getting-started",
    "title": "Tidyverse and Data Visualisation",
    "section": "Getting started",
    "text": "Getting started\nBegin by opening Rstudio and create a project for this workshop (or use one you have already created for this course).\nSee this brief discussion of how to go about this.\nSee also this article about ways of working with R and Rstudio.\nWe will need to install some additional packages for this exercise. We will start by installing the tidyverse set of packages. Although there are many tidyverse packages, including tidyr, dplyr, and ggplot2, which we could install individually, it is easier to use the ‘tidyverse’ package\n\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n\nThe documentation for ggplot2 is available online here if you need to access it.\nRemember that you can always access the help for any R function if you need to by typing ? and the name of the function into the console.\n\n?geom_point"
  },
  {
    "objectID": "Tidyverse-and-visualisation.html#reading-and-tidying",
    "href": "Tidyverse-and-visualisation.html#reading-and-tidying",
    "title": "Tidyverse and Data Visualisation",
    "section": "Reading and Tidying",
    "text": "Reading and Tidying\nOn the course blackboard page, you will find the three .csv files. Download these files in a folder within your project named data [^1]. [1:] All of this data is repurposed from the gapminder package.\nWe can load one of these in using the read_csv function:\n\ngdp_df &lt;- read_csv(\"data/gdp_pc.csv\")\n\ngdp_df\n\n\n\nRows: 142 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): country, continent\ndbl (12): 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, 2002, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 142 × 14\n   country     continent `1952` `1957` `1962` `1967` `1972` `1977` `1982` `1987`\n   &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Afghanistan Asia        779.   821.   853.   836.   740.   786.   978.   852.\n 2 Albania     Europe     1601.  1942.  2313.  2760.  3313.  3533.  3631.  3739.\n 3 Algeria     Africa     2449.  3014.  2551.  3247.  4183.  4910.  5745.  5681.\n 4 Angola      Africa     3521.  3828.  4269.  5523.  5473.  3009.  2757.  2430.\n 5 Argentina   Americas   5911.  6857.  7133.  8053.  9443. 10079.  8998.  9140.\n 6 Australia   Oceania   10040. 10950. 12217. 14526. 16789. 18334. 19477. 21889.\n 7 Austria     Europe     6137.  8843. 10751. 12835. 16662. 19749. 21597. 23688.\n 8 Bahrain     Asia       9867. 11636. 12753. 14805. 18269. 19340. 19211. 18524.\n 9 Bangladesh  Asia        684.   662.   686.   721.   630.   660.   677.   752.\n10 Belgium     Europe     8343.  9715. 10991. 13149. 16672. 19118. 20980. 22526.\n# ℹ 132 more rows\n# ℹ 4 more variables: `1992` &lt;dbl&gt;, `1997` &lt;dbl&gt;, `2002` &lt;dbl&gt;, `2007` &lt;dbl&gt;\n\n\nWe can see that this data is not in ‘tidy’ format.\nThe columns ‘1952’,‘1957’, …, etc give each provide different sets of observations of the same variable (GDP per capita).\nTherefore, we would like to convert this plot to tidy format using the pivot_longer function from the tidyr package.\n\ngdp_tidy_df &lt;- gdp_df %&gt;% \n  # select all columns except country and continent\n  pivot_longer(-c(country, continent),\n               names_to=\"year\",\n               values_to=\"gdp_per_cap\")\ngdp_tidy_df\n\n# A tibble: 1,704 × 4\n   country     continent year  gdp_per_cap\n   &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;\n 1 Afghanistan Asia      1952         779.\n 2 Afghanistan Asia      1957         821.\n 3 Afghanistan Asia      1962         853.\n 4 Afghanistan Asia      1967         836.\n 5 Afghanistan Asia      1972         740.\n 6 Afghanistan Asia      1977         786.\n 7 Afghanistan Asia      1982         978.\n 8 Afghanistan Asia      1987         852.\n 9 Afghanistan Asia      1992         649.\n10 Afghanistan Asia      1997         635.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "Tidyverse-and-visualisation.html#filter-group-by-summarise",
    "href": "Tidyverse-and-visualisation.html#filter-group-by-summarise",
    "title": "Tidyverse and Data Visualisation",
    "section": "Filter, Group by, Summarise",
    "text": "Filter, Group by, Summarise\nWe can filter, compute summaries, and create new columns in the data by using functions from the dplyr package.\nWe can, for instance, calculate the mean gdp per capita.\n\nsummarise(gdp_tidy_df, mean_gdp_per_cap = mean(gdp_per_cap))\n\n# A tibble: 1 × 1\n  mean_gdp_per_cap\n             &lt;dbl&gt;\n1            7215.\n\n\nWe could also do this using the pipe operator:\n\ngdp_tidy_df %&gt;% summarise(mean_gdp_per_cap=mean(gdp_per_cap))\n\n# A tibble: 1 × 1\n  mean_gdp_per_cap\n             &lt;dbl&gt;\n1            7215.\n\n\nWe might like to find out the number of observations in each group.\nWe can subset the data to find a specific year.\n\ngdp_tidy_df %&gt;% \n  # choose only those rows where the condition year==max(year) holds\n  # (i.e. the latest year)\n  filter(year==max(year)) %&gt;%\n  # arrange in order of gdp per capita, \n  # in descending order (without the `-`, we would have smallest first) \n  arrange(-gdp_per_cap)\n\n# A tibble: 142 × 4\n   country          continent year  gdp_per_cap\n   &lt;chr&gt;            &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;\n 1 Norway           Europe    2007       49357.\n 2 Kuwait           Asia      2007       47307.\n 3 Singapore        Asia      2007       47143.\n 4 United States    Americas  2007       42952.\n 5 Ireland          Europe    2007       40676.\n 6 Hong Kong, China Asia      2007       39725.\n 7 Switzerland      Europe    2007       37506.\n 8 Netherlands      Europe    2007       36798.\n 9 Canada           Americas  2007       36319.\n10 Iceland          Europe    2007       36181.\n# ℹ 132 more rows\n\n\nWe will calculate mean gdp by continent[^1], so will use the group_by function to create groups based on the continent column. Any subsequent calculations we carry out on that data frame will be conducted separately for each group, as though we were working on separate dataframes.\n\ngdp_tidy_df %&gt;% \n  group_by(continent)\n\n# A tibble: 1,704 × 4\n# Groups:   continent [5]\n   country     continent year  gdp_per_cap\n   &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;\n 1 Afghanistan Asia      1952         779.\n 2 Afghanistan Asia      1957         821.\n 3 Afghanistan Asia      1962         853.\n 4 Afghanistan Asia      1967         836.\n 5 Afghanistan Asia      1972         740.\n 6 Afghanistan Asia      1977         786.\n 7 Afghanistan Asia      1982         978.\n 8 Afghanistan Asia      1987         852.\n 9 Afghanistan Asia      1992         649.\n10 Afghanistan Asia      1997         635.\n# ℹ 1,694 more rows\n\n\nWe can see the groups are indicated in the information printed at the top of the dataframe.\n\ngdp_tidy_df %&gt;% \n  group_by(continent) %&gt;% \n  summarise(mean_gdp_per_cap=mean(gdp_per_cap))\n\n# A tibble: 5 × 2\n  continent mean_gdp_per_cap\n  &lt;chr&gt;                &lt;dbl&gt;\n1 Africa               2194.\n2 Americas             7136.\n3 Asia                 7902.\n4 Europe              14469.\n5 Oceania             18622.\n\n\nWe can also choose a different variable to group on. Try doing this by year, for example."
  },
  {
    "objectID": "Tidyverse-and-visualisation.html#joining",
    "href": "Tidyverse-and-visualisation.html#joining",
    "title": "Tidyverse and Data Visualisation",
    "section": "Joining",
    "text": "Joining\nIn fact, these values are not very meaningful. We should really be accounting for differences in population size between the countries we are averaging over.\nTherefore, we need to load in data on population. As above, try to read in the data on population and covert to tidy format, and store in dataframe called pop_tidy_df.\n\n\nSolution\n\n\npop_tidy_df &lt;- read_csv(\"data/pop.csv\") %&gt;% \n  pivot_longer(-c(country, continent),\n               names_to=\"year\",\n               values_to=\"population\")\npop_tidy_df\n\n\n\nRows: 142 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): country, continent\ndbl (12): 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, 2002, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 1,704 × 4\n   country     continent year  population\n   &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;\n 1 Afghanistan Asia      1952     8425333\n 2 Afghanistan Asia      1957     9240934\n 3 Afghanistan Asia      1962    10267083\n 4 Afghanistan Asia      1967    11537966\n 5 Afghanistan Asia      1972    13079460\n 6 Afghanistan Asia      1977    14880372\n 7 Afghanistan Asia      1982    12881816\n 8 Afghanistan Asia      1987    13867957\n 9 Afghanistan Asia      1992    16317921\n10 Afghanistan Asia      1997    22227415\n# ℹ 1,694 more rows\n\n\n\nWe would like to combine this with the data on gdp.\nWe can do this using the join functions from dplyr.\n\ncountry_df &lt;- gdp_tidy_df %&gt;% \n  left_join(pop_tidy_df)\n\nJoining with `by = join_by(country, continent, year)`\n\ncountry_df\n\n# A tibble: 1,704 × 5\n   country     continent year  gdp_per_cap population\n   &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt;\n 1 Afghanistan Asia      1952         779.    8425333\n 2 Afghanistan Asia      1957         821.    9240934\n 3 Afghanistan Asia      1962         853.   10267083\n 4 Afghanistan Asia      1967         836.   11537966\n 5 Afghanistan Asia      1972         740.   13079460\n 6 Afghanistan Asia      1977         786.   14880372\n 7 Afghanistan Asia      1982         978.   12881816\n 8 Afghanistan Asia      1987         852.   13867957\n 9 Afghanistan Asia      1992         649.   16317921\n10 Afghanistan Asia      1997         635.   22227415\n# ℹ 1,694 more rows\n\n\nThis function looks for columns common to both datasets, and looks for rows in each dataset with the same values in these common columns by which to join the dataset together.\nLook at the simple example below to understand the result of a join operation. Notice that the correct customer age and sex is matched the relevant row of the transaction dataset. In the case of John, there is no customer data, so an NA value is inserted. Note also that it doesn’t matter whether the datasets are in the same order or have the same number of rows.\n\ntransaction_df &lt;- \n  tibble(Transaction=c(1,2,3,4,5),\n         Customer=c(\"John\", \"Jill\", \"Omar\", \"Liying\", \"Omar\"),\n         Amount =c(24,54,65.4,5,0.3))\ntransaction_df\n\n# A tibble: 5 × 3\n  Transaction Customer Amount\n        &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;\n1           1 John       24  \n2           2 Jill       54  \n3           3 Omar       65.4\n4           4 Liying      5  \n5           5 Omar        0.3\n\ncustomer_df &lt;- \n  tibble(Customer =c(\"Liying\", \"Jill\", \"Omar\"),\n         Age =c(34,54,65),\n         Sex = c(\"f\", \"f\", \"m\"))\ncustomer_df\n\n# A tibble: 3 × 3\n  Customer   Age Sex  \n  &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;\n1 Liying      34 f    \n2 Jill        54 f    \n3 Omar        65 m    \n\ntransaction_df %&gt;% \n  left_join(customer_df)\n\nJoining with `by = join_by(Customer)`\n\n\n# A tibble: 5 × 5\n  Transaction Customer Amount   Age Sex  \n        &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n1           1 John       24      NA &lt;NA&gt; \n2           2 Jill       54      54 f    \n3           3 Omar       65.4    65 m    \n4           4 Liying      5      34 f    \n5           5 Omar        0.3    65 m"
  },
  {
    "objectID": "Tidyverse-and-visualisation.html#mutating",
    "href": "Tidyverse-and-visualisation.html#mutating",
    "title": "Tidyverse and Data Visualisation",
    "section": "Mutating",
    "text": "Mutating\nBack to the gdp data, lets calculate average gdp per capita by continent for the latest year in a more correct manner.\n\ncountry_df %&gt;% \n  filter(year==max(year)) %&gt;%\n  # creating a new column\n  mutate(gdp = gdp_per_cap * population) %&gt;%\n  group_by(continent) %&gt;%\n  summarise(total_gdp=sum(gdp),\n            total_pop=sum(population)) %&gt;% \n  mutate(mean_gdp = total_gdp/total_pop)\n\n# A tibble: 5 × 4\n  continent total_gdp  total_pop mean_gdp\n  &lt;chr&gt;         &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n1 Africa      2.38e12  929539692    2561.\n2 Americas    1.94e13  898871184   21603.\n3 Asia        2.07e13 3811953827    5432.\n4 Europe      1.48e13  586098529   25244.\n5 Oceania     8.07e11   24549947   32885."
  },
  {
    "objectID": "Tidyverse-and-visualisation.html#visualisation",
    "href": "Tidyverse-and-visualisation.html#visualisation",
    "title": "Tidyverse and Data Visualisation",
    "section": "Visualisation",
    "text": "Visualisation\nNext, read in the third .csv dataset provided, and join this to the other two, so that we have gdp, population and life expectancy data together in one data frame called country_df.\n\n\nSolution\n\n\nlife_exp_df &lt;- read_csv(\"data/life_exp.csv\") %&gt;% \n  pivot_longer(-c(country, continent),\n               names_to=\"year\",\n               values_to=\"life_expectancy\")\n\ncountry_df &lt;- country_df %&gt;% \n  left_join(life_exp_df)\ncountry_df\n\n\n\nRows: 142 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): country, continent\ndbl (12): 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, 2002, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nJoining with `by = join_by(country, continent, year)`\n\n\n# A tibble: 1,704 × 6\n   country     continent year  gdp_per_cap population life_expectancy\n   &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;\n 1 Afghanistan Asia      1952         779.    8425333            28.8\n 2 Afghanistan Asia      1957         821.    9240934            30.3\n 3 Afghanistan Asia      1962         853.   10267083            32.0\n 4 Afghanistan Asia      1967         836.   11537966            34.0\n 5 Afghanistan Asia      1972         740.   13079460            36.1\n 6 Afghanistan Asia      1977         786.   14880372            38.4\n 7 Afghanistan Asia      1982         978.   12881816            39.9\n 8 Afghanistan Asia      1987         852.   13867957            40.8\n 9 Afghanistan Asia      1992         649.   16317921            41.7\n10 Afghanistan Asia      1997         635.   22227415            41.8\n# ℹ 1,694 more rows\n\n\n\nLet’s start by building up a plot. First we initialise a plot and choose the dataset we wish to use:\n\nggplot(data= country_df)\n\n\n\n\n\n\n\n\nThis just creates a blank plot. This is because we have not specified any mappings from data dimensions to aesthetics, nor have we stated the geometric object we want to represent the data on the screen.\nLet’s decide that we will map some of the variables in our dataset to position aesthetics. We will map GDP to the x aesthetic, and life expectancy to the y aesthetic. By specifying these at the plot initialisation stage, we have determine that we want this to apply to all future layers.\n\nggplot(data=country_df, mapping=aes(x=gdp_per_cap, y=life_expectancy))\n\n\n\n\n\n\n\n\nWe can now see that be specifying the mappings, ggplot knows enough about what we intend to draw the axes.\nWe have still to determine what the physical representations of our data will look like. We do this by creating a new layer with a specific geometry. We will use a point as the representation of each observation in our dataset.\n\nggplot(data=country_df, mapping=aes(x=gdp_per_cap, y=life_expectancy)) +\n  geom_point()\n\n\n\n\n\n\n\n\nYou can also assign a plot to R variable.\n\np &lt;- ggplot(data=country_df, mapping=aes(x=gdp_per_cap, y=life_expectancy))\n\nThis allows you to add layers to it later.\n\np + geom_point()\n\n\n\n\n\n\n\n\nThe relationship between gdp_per_cap and life_expectancy looks highly non-linear. Perhaps a transformation would help address this."
  },
  {
    "objectID": "Tidyverse-and-visualisation.html#tasks",
    "href": "Tidyverse-and-visualisation.html#tasks",
    "title": "Tidyverse and Data Visualisation",
    "section": "Tasks",
    "text": "Tasks\n\nQuestion 1\nChange the scale of the x axis to a log scale (refer back to the lecture notes or documentation is necessary).\n\n\nSolution\n\nSeveral possible solutions:\n\nggplot(data=country_df, \n       mapping=aes(x=gdp_per_cap, y=life_expectancy)) + \n  geom_point() + \n  scale_x_log10( labels=round)\n\n\n\n\n\n\n\n\n\nWe can change the scale using the transformation argument of the scale, in this case using .\n\n\nggplot(data=country_df, \n       mapping=aes(x=gdp_per_cap, y=life_expectancy)) + \n  geom_point() + \n  scale_x_continuous(trans=\"log\", labels=round)\n\n\n\n\n\n\n\n\n\nWe can transform the data itself.\n\n\nggplot(data=country_df, \n       mapping=aes(x=log(gdp_per_cap), y=life_expectancy)) + \n  geom_point()\n\n\n\n\n\n\n\n\nNote the differences in the labels along the x-axis. - The first and second solution keeps the data the same, but uses log-scaling to translate this to distance along the x axis. - The third solution transforms the original data, and then translates this transformed data to distance in the x-direction using a linear scaling.\n\n\n\nQuestion 2\nColour each continent separately using the colour aesthetic\n\n\nSolution\n\n\nggplot(data=country_df, \n       mapping=aes(x=log(gdp_per_cap), y=life_expectancy, colour=continent)) + \n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nQuestion 3\nPatterns aren’t always easy to distinguish with lots of observations. Try faceting the plot on the year variable.\n\n\nSolution\n\n\nggplot(data=country_df, \n       mapping=aes(x=log(gdp_per_cap), y=life_expectancy,\n                   colour=continent)) + \n  geom_point() + \n  facet_wrap(~year)\n\n\n\n\n\n\n\n\n\n\n\nQuestion 4.\nPlot histograms of the continuous variables. Experiment with examining the distributions of these variables separately by year.\nNote that ggplot2 has a geom_histogram geometry that allows histograms to be created easily, mapping the continuous variable of interest to the x aesthetic. Technically speaking, this is actually a combination of a transformation of the variable into binned counts, and the use of a bar geometry, but the histogram geometry is a useful shorthand for this.\n\n\nSolution\n\n\nggplot(country_df, aes(x=life_expectancy)) + \n  geom_histogram() + facet_wrap(~year)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nggplot(country_df, aes(x=gdp_per_cap)) + \n  geom_histogram() + facet_wrap(~year) + \n  scale_x_log10()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\n\nExtra\n\nWe might also want to build a stacked histogram:\n\nggplot(country_df, aes(x=life_expectancy, \n                       group=continent, fill=continent)) + \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nNote the difference between fill and colour in the above!\nPosition This works by using the position argument to the geometry, which we haven’t yet discussed. - The point of this attribute to geom is to avoid overplotting - Most of the time position will be set to identity - Looking at the position argument to geom_histogram (try ?geom_histogram), we notice that we it is set to stack by default. - This means bars in different groups with the same x value are translated to lie on top of one another.\nWe can overide this, adding some transparency:\n\nggplot(country_df, aes(x=life_expectancy, \n                       group=continent, fill=continent)) + \n  geom_histogram(position=\"identity\", alpha=0.5) +\n  theme_bw()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nThis is not a very easy plot to interpret, however, and I wouldn’t recommend it!\n\nggplot(country_df %&gt;% filter(year %in% seq(1957,2007, 10)), \n       aes(x=life_expectancy, group=continent, fill=continent)) + \n  geom_histogram() + facet_wrap(~year)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nWe can compare more directly between continents using facet_grid, allowings us to split out facets by two cateogries, one in rows, and one in columns. But the individual plots are now quite small.\n\nggplot(country_df %&gt;% filter(year %in% seq(1967,2007, 20)), \n       aes(x=life_expectancy, group=continent, fill=continent)) + \n  geom_histogram() + facet_grid(continent~year)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 5\nLabel your plots with titles and more appropriate axis names. Try a different theme, and adjust the base theme\n\n\nSolution\n\n\np &lt;- ggplot(country_df %&gt;% filter(year %in% seq(1967,2008, 20)), \n       aes(x=gdp_per_cap, y=life_expectancy, colour=continent)) + \n  geom_point() + \n  scale_x_log10(labels= function(x) round(x/1000)) +\n  facet_wrap(~year) +\n  theme_bw(base_size = 20) +\n  labs(title=\"GDP per Capita vs Life Expectancy by Year\",\n       x=\"GDP per Capita (000s)\")\n\nprint(p)\n\n\n\n\n\n\n\n\n\n\n\nQuestion 6\nSave one of your plots out to a png using ggsave.\nUse the help function to get familiar with how to use ggsave. The examples section of the bottom of the help page can be particularly useful.\n\n\nSolution\n\n\n  ggsave(\"pop.png\", p)\n\nSaving 7 x 5 in image"
  }
]